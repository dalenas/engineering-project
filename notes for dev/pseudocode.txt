# ===========================================
# 1: Color Bias Adjustment and Sampling
# ===========================================

BEGIN IMAGE_PROCESSING
    INPUT: sample_picture
    OUTPUT: LAB_values

    # Get image containing skin region & reference colors/control sheet

    IF sample_picture IS NULL THEN
        RAISE ERROR "Image captured failed or canceled"
        EXIT
    ENDIF

    skin = DETECT_SKIN_REGION(sample_picture)
    control = DETECT_REFERENCE_PATCHES(sample_picture)

    IF control IS EMPTY THEN
        RAISE ERROR "Image does not contain control set. Retake picture with printout."
    ENDIF

    # take rgb code of skin & the reference colors

    rgb_skin_raw = AVG_RGB(sample_picture, skin)
    rgb_control_reading = AVG_RGB(sample_picture, control)

    # find difference in the read reference vs the known values on the sheet

    rgb_control_known = LOAD_REFERENCE('control_table.csv')
    delta_E = CALCULATE_DIFFERENCE(rgb_control_known, rgb_control_reading)
    ccm_matrix = GENERATE_CCM(delta_E)

    # apply difference to the values found in the skin region for lighting correction

    rgb_skin_corrected = APPLY_CCM(ccm_matrix, rgb_skin_raw)

    # convert rgb value to lab for later processing

    LAB_values = CONVERT_RGB_LAB(rgb_skin_corrected)

    FOR element IN LAB_values
        IF element IS OUT_OF_RANGE
            RAISE ERROR "color conversion error. take a new picture."
        ENDIF
    END FOR

    RETURN LAB_values

END

BEGIN DETECT_SKIN_REGION
    INPUT: sample_picture
    OUTPUT: skin #mask that highlights regions of skin to evaluate
END

BEGIN DETECT_REFERENCE_PATCHES
    INPUT: sample_picture
    OUTPUT: control #mask that highlights the printout that has reference colors
END

BEGIN AVG_RGB
    INPUT: sample_picture, region #region is one of the masks
    OUTPUT: rgb_list #[r, g, b]
END

BEGIN CALCULATE_DIFFERENCE
    INPUT: rgb_control_known, rgb_control_reading
    OUTPUT: delta_E #[r, g, b] of the offset
END

BEGIN GENERATE_CCM
    INPUT: delta_E
    OUTPUT: ccm_matrix #2d list -> 3x3 matrix correcting the offset
END

BEGIN APPLY_CCM
    INPUT: ccm_matrix, rgb_skin_raw
    OUTPUT: rgb_skin_corrected
END

BEGIN CONVERT_RGB_LAB
    INPUT: rgb_skin_corrected
    OUTPUT: LAB_values
END